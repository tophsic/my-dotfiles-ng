snippet php "PHP" b
<?php

${1}
endsnippet

snippet ns "namespace declaration" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = 'App\\' + m.group().replace('/', '\\')
`};

${1}
endsnippet

snippet class "class declaration" b
${2:class} ${1:`!p
relpath = os.path.basename(path)
snip.rv = relpath.replace('.php', '')
`}
{
	${3}
}
endsnippet

snippet ec "Basic echo" b
echo ${1} . PHP_EOL;
endsnippet

snippet elvp "ErrorLog And Var Export" b
error_log(var_export( ${1:$menu}, true ) . PHP_EOL, 3, ${2:'../var/log/debug.log'});
endsnippet

snippet el "ErrorLog" b
error_log(${1:'log'} . PHP_EOL, 3, '${2:../}${3:var/log/debug.log}');
endsnippet

snippet elgc "ErrorLog" b
error_log(get_class(${1:$object}) . PHP_EOL, 3, '${2:../}${3:var/log/debug.log}');
endsnippet

snippet dump "var_dump" b
var_dump(${1});
endsnippet

snippet backtrace "debug_backtrace" b
debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
endsnippet

snippet m "Class method" b
${1:protected} function ${2:method}(${3}): ${4:void}
{
	return${5};
}
endsnippet

snippet eattr "Entity attribute" b
/** @var ${1:int}${4:|null} */
private $${2:attribute};

/**
 * @return $1$4
 */
public function get`!p snip.rv = t[2][:1].capitalize() + t[2][1:]`(): ${3:?}$1
{
    return $this->$2;
}

/**
 * @param $1 $$2
 */
public function set`!p snip.rv = t[2][:1].capitalize() + t[2][1:]`($1 $$2): void
{
    $this->$2 = $$2;
}
endsnippet

snippet var "var doc" b
/** @var ${1:string} */
endsnippet
