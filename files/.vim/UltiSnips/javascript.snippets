snippet tplMethod "Template onMethod call" b
Template.${1:tpl}.on${2:Created}(function() {
  debug('Template $1 ${2/.*/\l$0/}');
});
endsnippet



snippet tplHelpers "Template helpers|events" b
Template.${1:tpl}.${2:helpers}({
  $3
});
endsnippet



snippet tplEvents "Template events" b
Template.${1:tpl}.events({
  $3
});
endsnippet



snippet import "ES6 import" b
import ${4:\{} ${1:Template} ${5:\}} from '${3:meteor/}${1/.*/\l$0/}${2}'
endsnippet

snippet ic "Client import" b
import ${4:\{} ${1:app} ${5:\}} from '/imports/client/${1/.*/\l$0/}${2}'
endsnippet


snippet id "Import default" b
import ${1:React} from '${1/.*/\l$0/}${2}'
endsnippet

snippet iLink "Import default" b
import { Link } from "react-router-dom"
endsnippet

snippet iPanelDuck "Import default" b
import { PanelDuck } from "@therealcodekraft/react-web-bootstrap"
endsnippet

snippet iPrice "Import default" b
import Price from "components/common/price-v"
endsnippet

snippet iImage "Import default" b
import Image from "components/common/image-v"
endsnippet

snippet debug "Debug" b
const debug = require('debug')('${1:debugvar}')
endsnippet

snippet d "Debug call" b
debug(${1:"Hello"})
endsnippet


snippet inst "Template instance"
Template.instance()${1};
endsnippet



snippet describe "Describe" b
describe('${1:describe}', function() {
	${2}
})
endsnippet



snippet it "It" b
it('${1:it}', function() {
	${2}
})
endsnippet


snippet row "Row" b
{
  key: '${1:key}',
  value: '${2:value}',
},${4}
endsnippet

snippet rowRate "Description" b
{
    $gte: ${1:0},
    $lt: ${2:10},
    value: ${3:10},${4}
},
endsnippet


snippet t "Temp"
'4.${1:a}',
endsnippet


snippet c "code" b
code: '${3:code}'
endsnippet


snippet setget "Temporary setter and getter snippet" b
set${1:Field}(value) {
    this.${1/.*/\l$0/}.set(value);
    this.resetLimit();
}

get${1}() {
    return this.${1/.*/\l$0/}.get();
}
endsnippet

snippet queryBuilder "Temporary query builder snippet" b
const $1 = this.${1:field}.get();
if ($1${3: !== null}) {
  query.$1 = { '${2:field}.$1': $1 };
}
endsnippet

snippet esd "Eslint disable" b
/* eslint-disable */
endsnippet

snippet ese "Eslint enable" b
/* eslint-enable */
endsnippet

snippet esdl "Eslint disable line"
// eslint-disable-line
endsnippet

# React snippets
snippet rcomponent "React component" b
import React from "react"

export default function ${1:Component}() {
  return (<div>My component</div>)
}
endsnippet

snippet ex "Default export" b
export default from "./${1:`!p snip.rv = snip.basename`}${2:-v}"
endsnippet
# End React snippets

# Redux snippets
global !p
def underscore(value):
	return re.sub('([A-Z]+)', r'_\1', value).upper()
def upperLetter(match):
	return match.group(1).upper()
def camel(value):
	return re.sub(r'^([a-z])', upperLetter, re.sub(r'_([a-z])', upperLetter, value.lower()))
endglobal

snippet daction "Ducks action" b
${3:export }function ${1:action}(${2}) {
  return { type: `!p
snip.rv = underscore(t[1])
``!p
snip.rv = ", " + t[2] if t[2] is not "" else ""` }
}
endsnippet

snippet dconst "Ducks constant" b
const ${1:CONSTANT} = '${2:`!p snip.rv = path.replace('ducks/', '').replace('.js', '')`}/$1'
endsnippet

snippet dreducer "Ducks reducer" b
export default function reducer(state = ${1:{}}, action) {
  switch (action.type) {${2}
    default:
      return state
  }
}
endsnippet

snippet dsagas "Ducks sagas" b
export function* sagas(${1}) {
  yield [
		takeEvery(${2:ACTION}, handle`!p snip.rv = camel(t[2])``!p snip.rv = ".bind(null, " + t[1] + ")" if t[1] is not "" else ""`),
  ]
}

endsnippet

snippet iD "Import ducks" b
import { ${1:duck} } from 'Ducks/${2:duck}'
endsnippet

snippet rcontainer "Redux container" b
import { connect } from "react-redux"

import ${1:Component} from "./${2:`!p snip.rv = snip.basename`}${3:-v}"

const mapStateToProps = (state, ownProps) => ({
})

const mapDispatchToProps = (dispatch, ownProps) => ({
})

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet
# End Redux snipets

snippet log "log" b
console.log($1)
endsnippet

snippet warn "warn" b
console.warn($1)
endsnippet

snippet me "Me" b
me: state.userState.me,
endsnippet

snippet client "Client" b
client: state.bootstrap.clients.${1:Api}Client,
endsnippet

snippet mergeProps "Merge props" b
const mergeProps = (stateProps, dispatchProps, ownProps) => ({
	...stateProps,
	...dispatchProps,
	...ownProps,
})
endsnippet

snippet state "useState hook" b
const [ ${1:var}, set`!p snip.rv = t[1][:1].capitalize() + t[1][1:]` ] = useState(${2})
endsnippet

snippet effect "useEffect hook" b
useEffect(() => {
}, [ ${1:var} ])
endsnippet
